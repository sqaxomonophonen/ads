: dup    0 pick ;
: over   1 pick ;
: swap   2 nrot ;
: rot    3 nrot ;
: tro    3 ntro ;

: e10 ( x y -- x*10^y )
   10 swap ^ *
;

: test_e10
   3 2 e10  300    = assert
   3 3 e10  3000   = assert
;


: EXPR_CONST 0 ;
: EXPR_INPUT 1 ;
: EXPR_WORK  2 ;
: EXPR_DELAY 3 ;
: EXPR_CURVE 4 ;

: newgraph
   arrnew
   _dtgraph ( no-op in release builds, but tags object as graph in debug builds )
   0 arrpush      ( number of inputs )
   arrnew arrpush ( work expressions )
   arrnew arrpush ( delay tuples )
   arrnew arrpush ( output expressions )
;

: graph_set_n_inputs ( G n -- G )
   0 swap ( -- G 0 n ) arrset ( -- G )
;

: graph_get_output_expressions ( G -- G outputexpr )
   3 arrget
;

: graph_thru   ( n -- n-input, n-output, pass-thru graph )
   dup
   newgraph ( -- n n G )
   swap graph_set_n_inputs ( -- n G )

   graph_get_output_expressions ( -- n G [..] )
   rot    ( -- G [..] n )
   times ( -- G [..] )
      arrnew EXPR_INPUT arrpush ( -- .. [..] [EXPR_INPUT] )
      swap      ( -- .. [EXPR_INPUT] [..])
      arrlen    ( -- .. [EXPR_INPUT] [..] len)
      rot swap  ( -- .. [..] [EXPR_INPUT] len)
      arrpush   ( -- .. [..] [EXPR_INPUT,len] )
      arrpush   ( -- .. [.., [EXPR_INPUT,len]] )
   loop
   drop
;

: test_thru
   3 thru  ( dump )  drop
   ( TODO? )
;

: graph_curvegen
   newgraph                        ( -- data G )
   arrnew EXPR_CURVE arrpush ( -- data G [EXPR_CURVE] )
   rot arrpush               ( -- G [EXPR_CURVE,data] )
   swap graph_get_output_expressions ( -- [EXPR_CURVE,data] G []  )
   rot arrpush                       ( -- G [[EXPR_CURVE,data]]  )
   drop
;

: test_curvegen
   42 curvegen ( dump ) drop
   ( TODO? )
;

: graph_compseq
   ( -- A B )
   arrnew                    ( -- A B [] )
   rot                       ( -- B [] A )
   0 arrget                  ( -- B [] A A[0] )
   rot swap arrpush          ( -- B A [A[0]] )
   tro                       ( -- [A[0]] B A )
   drop drop drop ( TODO )
;

: test_compseq
   2 thru 2 thru
   ~
;

: graph_comppar
   ( TODO )
;

: test_comppar
   ,
;

: graph_swizz
   ( TODO )
;

: test_swizz
   swizz
;

: graph_comprec
   ( TODO )
;

: test_comprec
   @
;

: graph_boxen
   ( TODO )
;

: test_boxen
   boxen
;
